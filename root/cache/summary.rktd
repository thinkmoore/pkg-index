#hash(("racket-poppler" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-poppler.txt") (test-failure-log . "server/built/test-fail/racket-poppler.txt") (test-success-log . #f))) ("racquel" . #hash((author . "brown131@yahoo.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "racquel" "doc/racquel@racquel/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racquel.txt") (test-failure-log . "server/built/test-fail/racquel.txt") (test-success-log . #f))) ("json-parsing" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "json-parsing" "doc/json-parsing@json-parsing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-parsing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-parsing.txt"))) ("pdf-read" . #hash((author . "gcr@sneakygcr.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "pdf-read" "doc/pdf-read@pdf-read/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pdf-read.txt") (test-failure-log . "server/built/test-fail/pdf-read.txt") (test-success-log . #f))) ("teachpacks" . #hash((author . "tyynetyyne@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "racket_turtle" "doc/racket_turtle@teachpacks/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/teachpacks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/teachpacks.txt"))) ("bzip2" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "bzip2" "doc/bzip2@bzip2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bzip2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bzip2.txt"))) ("hygienic-quote-lang" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "hygienic-quote" "doc/hygienic-quote@hygienic-quote-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hygienic-quote-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hygienic-quote-lang.txt"))) ("planet-doc" . #hash((docs . (#s(doc/main "planet" "doc/planet@planet-doc/index.html"))))) ("mzscheme-doc" . #hash((docs . (#s(doc/main "mzscheme" "doc/mzscheme@mzscheme-doc/index.html"))))) ("elasticsearch" . #hash((author . "stchang@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/elasticsearch.txt") (test-failure-log . "server/built/test-fail/elasticsearch.txt") (test-success-log . #f))) ("sugar" . #hash((author . "mb@mbtype.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "sugar" "doc/sugar@sugar/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sugar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sugar.txt"))) ("misc1" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "misc1" "doc/misc1@misc1/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/misc1.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/misc1.txt"))) ("prospect" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "highlevelref" "doc/highlevelref@prospect/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/prospect.txt") (test-failure-log . "server/built/test-fail/prospect.txt") (test-success-log . #f))) ("github-api" . #hash((author . "euler90h@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "github-api" "doc/github-api@github-api/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/github-api.txt") (test-failure-log . "server/built/test-fail/github-api.txt") (test-success-log . #f))) ("mcfly" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "mcfly" "doc/mcfly@mcfly/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mcfly.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mcfly.txt"))) ("slideshow-doc" . #hash((docs . (#s(doc/main "slideshow" "doc/slideshow@slideshow-doc/index.html") #s(doc/main "quick" "doc/quick@slideshow-doc/index.html"))))) ("libkenji" . #hash((author . "yd2dong@uwaterloo.ca") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libkenji.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libkenji.txt"))) ("bitsyntax" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "bitsyntax" "doc/bitsyntax@bitsyntax/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bitsyntax.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bitsyntax.txt"))) ("class-iop-doc" . #hash((author . "ryanc@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "class-iop" "doc/class-iop@class-iop-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/class-iop-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/class-iop-doc.txt"))) ("graph" . #hash((author . "stchang@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "graph" "doc/graph@graph/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graph.txt") (test-failure-log . "server/built/test-fail/graph.txt") (test-success-log . #f))) ("handin" . #hash((author . "mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "handin-server" "doc/handin-server@handin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/handin.txt") (test-failure-log . "server/built/test-fail/handin.txt") (test-success-log . #f))) ("distributed-places-test" . #hash((author . "tewk@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distributed-places-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distributed-places-test.txt"))) ("raco-find-collection" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "raco-fc" "doc/raco-fc@raco-find-collection/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-find-collection.txt") (test-failure-log . "server/built/test-fail/raco-find-collection.txt") (test-success-log . #f))) ("html-doc" . #hash((docs . (#s(doc/main "html" "doc/html@html-doc/index.html"))))) ("netrc" . #hash((author . "me@apgwoz.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "netrc" "doc/netrc@netrc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/netrc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/netrc.txt"))) ("medic" . #hash((author . "artlessu@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "medic" "doc/medic@medic/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/medic.txt") (test-failure-log . "server/built/test-fail/medic.txt") (test-success-log . #f))) ("redex-doc" . #hash((docs . (#s(doc/main "redex" "doc/redex@redex-doc/index.html"))))) ("serial" . #hash((author . "bprzygoda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/serial.txt") (success-log . "server/built/install/serial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/serial.txt"))) ("cldr-localenames-modern" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "cldr-localenames-modern" "doc/cldr-localenames-modern@cldr-localenames-modern/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-localenames-modern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-localenames-modern.txt"))) ("heresy" . #hash((author . "jarcane@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "heresy" "doc/heresy@heresy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/heresy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/heresy.txt"))) ("while-loop" . #hash((author . "clements@racket-lang.org dyoo@hashcollision.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "dyoo-while-loop" "doc/dyoo-while-loop@while-loop/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/while-loop.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/while-loop.txt"))) ("play" . #hash((author . "etanter@dcc.uchile.cl ifigueroap@gmail.com ") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/play.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/play.txt"))) ("distro-build-lib" . #hash((author . "mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-lib.txt"))) ("cldr-numbers-modern" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "cldr-numbers-modern" "doc/cldr-numbers-modern@cldr-numbers-modern/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-numbers-modern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-numbers-modern.txt"))) ("libopenal-racket" . #hash((author . "lehi@tosk.in") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/libopenal-racket.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("logbook" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/logbook.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("xexpr-path" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "xexpr-path" "doc/xexpr-path@xexpr-path/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xexpr-path.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xexpr-path.txt"))) ("mboxrd-read" . #hash((author . "clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "mboxrd-read" "doc/mboxrd-read@mboxrd-read/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mboxrd-read.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mboxrd-read.txt"))) ("sxml-intro" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "sxml-intro" "doc/sxml-intro@sxml-intro/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sxml-intro.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sxml-intro.txt"))) ("future-visualizer" . #hash((docs . (#s(doc/main "future-visualizer" "doc/future-visualizer@future-visualizer/index.html"))))) ("rfc3339-old" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "rfc3339-old" "doc/rfc3339-old@rfc3339-old/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rfc3339-old.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rfc3339-old.txt"))) ("leftist-tree" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "leftist-tree" "doc/leftist-tree@leftist-tree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/leftist-tree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/leftist-tree.txt"))) ("webapi" . #hash((author . "ryanc@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "webapi" "doc/webapi@webapi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/webapi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/webapi.txt"))) ("xlang" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xlang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xlang.txt"))) ("iloveck101" . #hash((author . "Dendoh@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/iloveck101.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("racklog" . #hash((docs . (#s(doc/main "racklog" "doc/racklog@racklog/index.html"))))) ("swindle" . #hash((docs . (#s(doc/main "swindle" "doc/swindle@swindle/index.html"))))) ("colon-match" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "colon-match" "doc/colon-match@colon-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colon-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colon-match.txt"))) ("multipath-daemon" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "multipath-daemon" "doc/multipath-daemon@multipath-daemon/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multipath-daemon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multipath-daemon.txt"))) ("multiscope" . #hash((author . "michael.ballantyne@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/multiscope.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("frog" . #hash((author . "greghendershott@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/frog.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/frog.txt"))) ("pex" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "pex" "doc/pex@pex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pex.txt") (test-failure-log . "server/built/test-fail/pex.txt") (test-success-log . #f))) ("typed-racket-stream" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-racket-stream.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-racket-stream.txt"))) ("socketcan" . #hash((author . "abencz@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/socketcan.txt") (success-log . "server/built/install/socketcan.txt") (test-failure-log . "server/built/test-fail/socketcan.txt") (test-success-log . #f))) ("xrepl-doc" . #hash((docs . (#s(doc/main "xrepl" "doc/xrepl@xrepl-doc/index.html"))))) ("ralist" . #hash((author . "dvanhorn@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "ralist" "doc/ralist@ralist/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ralist.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ralist.txt"))) ("superc" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "superc" "doc/superc@superc/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/superc.txt") (success-log . "server/built/install/superc.txt") (test-failure-log . "server/built/test-fail/superc.txt") (test-success-log . #f))) ("scgi" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "scgi" "doc/scgi@scgi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scgi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scgi.txt"))) ("php-parser" . #hash((author . "antoine.brand@sfr.fr") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/php-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/php-parser.txt"))) ("raw-string" . #hash((author . "cmpitg@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raw-string.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raw-string.txt"))) ("class-iop" . #hash((author . "ryanc@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/class-iop.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/class-iop.txt"))) ("markparam-test" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/markparam-test.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam-test.txt") (test-failure-log . "server/built/test-fail/markparam-test.txt") (test-success-log . #f))) ("reloadable" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reloadable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reloadable.txt"))) ("poppler-win32-x86-64" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-win32-x86-64.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-win32-x86-64.txt"))) ("tzinfo" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "tzinfo" "doc/tzinfo@tzinfo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tzinfo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tzinfo.txt"))) ("squicky" . #hash((author . "gray@nxg.name") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "squicky" "doc/squicky@squicky/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/squicky.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/squicky.txt"))) ("learn-to-type" . #hash((author . "laurent.orseau@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/learn-to-type.txt") (test-failure-log . "server/built/test-fail/learn-to-type.txt") (test-success-log . #f))) ("combinator-parser" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "combinator-parser" "doc/combinator-parser@combinator-parser/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/combinator-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/combinator-parser.txt"))) ("math-doc" . #hash((docs . (#s(doc/main "math" "doc/math@math-doc/index.html"))))) ("tesira" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "tesira" "doc/tesira@tesira/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tesira.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tesira.txt"))) ("txexpr" . #hash((author . "mb@mbtype.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "txexpr" "doc/txexpr@txexpr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/txexpr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/txexpr.txt"))) ("html-parsing" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "html-parsing" "doc/html-parsing@html-parsing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/html-parsing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/html-parsing.txt"))) ("seq-no-order" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "seq-no-order" "doc/seq-no-order@seq-no-order/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/seq-no-order.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/seq-no-order.txt"))) ("metapict" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "metapict" "doc/metapict@metapict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/metapict.txt") (test-failure-log . "server/built/test-fail/metapict.txt") (test-success-log . #f))) ("html-template" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "html-template" "doc/html-template@html-template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/html-template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/html-template.txt"))) ("abnf" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/abnf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/abnf.txt"))) ("unstable-latent-contract-lib" . #hash((author . "mflatt@racket-lang.org ntoronto@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-latent-contract-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-latent-contract-lib.txt"))) ("ldap" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "ldap" "doc/ldap@ldap/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ldap.txt") (test-failure-log . "server/built/test-fail/ldap.txt") (test-success-log . #f))) ("alexis-collection-lens" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "alexis-collection-lens" "doc/alexis-collection-lens@alexis-collection-lens/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-collection-lens.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-collection-lens.txt"))) ("request" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "request" "doc/request@request/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/request.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/request.txt"))) ("unstable-options-lib" . #hash((author . "chrdimo@racket-lang.org robby@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-options-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-options-lib.txt"))) ("rackunit-abbrevs" . #hash((author . "types@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "rackunit-abbrevs" "doc/rackunit-abbrevs@rackunit-abbrevs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-abbrevs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-abbrevs.txt"))) ("picturing-programs" . #hash((docs . (#s(doc/main "picturing-programs" "doc/picturing-programs@picturing-programs/index.html"))))) ("restore" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/restore.txt") (test-failure-log . "server/built/test-fail/restore.txt") (test-success-log . #f))) ("openal" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "openal" "doc/openal@openal/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openal.txt") (test-failure-log . "server/built/test-fail/openal.txt") (test-success-log . #f))) ("aoc-racket" . #hash((author . "mb@mbtype.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "aoc-racket" "doc/aoc-racket@aoc-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aoc-racket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/aoc-racket.txt"))) ("predicates" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "predicates" "doc/predicates@predicates/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/predicates.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/predicates.txt"))) ("alexis-util" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "alexis-util" "doc/alexis-util@alexis-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-util.txt"))) ("xdgbasedir0" . #hash((author . "lwoodman@vlifesystems.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/none "xdgbasedir"))) (failure-log . "server/built/fail/xdgbasedir0.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("drracket-solarized" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-solarized.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-solarized.txt"))) ("racl" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/racl.txt") (success-log . "server/built/install/racl.txt") (test-failure-log . "server/built/test-fail/racl.txt") (test-success-log . #f))) ("towers-lib" . #hash((author . "laurent.orseau@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/towers-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/towers-lib.txt"))) ("csv-reading" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "csv-reading" "doc/csv-reading@csv-reading/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csv-reading.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csv-reading.txt"))) ("automata-doc" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "automata" "doc/automata@automata-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata-doc.txt"))) ("sha" . #hash((author . "greghendershott@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "sha" "doc/sha@sha/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sha.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sha.txt"))) ("sagiri-comm" . #hash((author . "yd2dong@uwaterloo.ca") (conflicts-log . #f) (dep-failure-log . "server/built/deps/sagiri-comm.txt") (docs . (#s(doc/main "main" "doc/main@sagiri-comm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sagiri-comm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sagiri-comm.txt"))) ("opengl" . #hash((author . "stephanh42@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "opengl" "doc/opengl@opengl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/opengl.txt") (test-failure-log . "server/built/test-fail/opengl.txt") (test-success-log . #f))) ("rfc6455" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "rfc6455" "doc/rfc6455@rfc6455/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rfc6455.txt") (test-failure-log . "server/built/test-fail/rfc6455.txt") (test-success-log . #f))) ("sau-cptr-405" . #hash((author . "rordonez@southern.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "sau-cptr-405" "doc/sau-cptr-405@sau-cptr-405/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sau-cptr-405.txt") (test-failure-log . "server/built/test-fail/sau-cptr-405.txt") (test-success-log . #f))) ("data-red-black" . #hash((author . "dyoo@hashcollision.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "data-red-black" "doc/data-red-black@data-red-black/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/data-red-black.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/data-red-black.txt"))) ("job-queue" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "job-queue" "doc/job-queue@job-queue/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/job-queue.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/job-queue.txt"))) ("mockfighter" . #hash((author . "euler90h@gmail.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/mockfighter.txt") (docs . (#s(doc/main "mockfighter" "doc/mockfighter@mockfighter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mockfighter.txt") (test-failure-log . "server/built/test-fail/mockfighter.txt") (test-success-log . #f))) ("jack-ease" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "ease" "doc/ease@jack-ease/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jack-ease.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jack-ease.txt"))) ("rws-html-template" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "rws-html-template" "doc/rws-html-template@rws-html-template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rws-html-template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rws-html-template.txt"))) ("github" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/github.txt") (test-failure-log . "server/built/test-fail/github.txt") (test-success-log . #f))) ("data-doc" . #hash((docs . (#s(doc/main "data" "doc/data@data-doc/index.html"))))) ("drracket-cyberpunk" . #hash((author . "scott@thinkmoore.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-cyberpunk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-cyberpunk.txt"))) ("gregor-test" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor-test.txt"))) ("mordae" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mordae.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mordae.txt"))) ("derpy" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "derpy" "doc/derpy@derpy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/derpy.txt") (test-failure-log . "server/built/test-fail/derpy.txt") (test-success-log . #f))) ("match-plus" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "match-plus" "doc/match-plus@match-plus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/match-plus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/match-plus.txt"))) ("zmq" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "zmq" "doc/zmq@zmq/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zmq.txt") (test-failure-log . "server/built/test-fail/zmq.txt") (test-success-log . #f))) ("remix" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/remix.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("temp-c" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/temp-c.txt"))) ("infix" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "infix-manual" "doc/infix-manual@infix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/infix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/infix.txt"))) ("continued-fractions" . #hash((author . "deren.dohoda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "cf-manual" "doc/cf-manual@continued-fractions/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/continued-fractions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/continued-fractions.txt"))) ("typeset-rewriter" . #hash((author . "sgtamk@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typeset-rewriter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typeset-rewriter.txt"))) ("drdr2" . #hash((author . "jay@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drdr2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drdr2.txt"))) ("get-bonus" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/get-bonus.txt") (test-failure-log . "server/built/test-fail/get-bonus.txt") (test-success-log . #f))) ("make" . #hash((docs . (#s(doc/main "make" "doc/make@make/index.html"))))) ("pict-doc" . #hash((docs . (#s(doc/main "pict" "doc/pict@pict-doc/index.html"))))) ("progedit" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "progedit" "doc/progedit@progedit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/progedit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/progedit.txt"))) ("doc-coverage" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "doc-coverage" "doc/doc-coverage@doc-coverage/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/doc-coverage.txt") (test-failure-log . "server/built/test-fail/doc-coverage.txt") (test-success-log . #f))) ("tandem" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "tandem" "doc/tandem@tandem/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tandem.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tandem.txt"))) ("rackpgmp" . #hash((author . "wjb@williamjbowman.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "perflinty" "doc/perflinty@rackpgmp/index.html") #s(doc/main "pgmp" "doc/pgmp@rackpgmp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackpgmp.txt") (test-failure-log . "server/built/test-fail/rackpgmp.txt") (test-success-log . #f))) ("hamt" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "hamt" "doc/hamt@hamt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hamt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hamt.txt"))) ("stardate" . #hash((author . "dyoo@hashcollision.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "stardate" "doc/stardate@stardate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stardate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stardate.txt"))) ("alexis-multicast" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "alexis-multicast" "doc/alexis-multicast@alexis-multicast/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-multicast.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-multicast.txt"))) ("type-conventions" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/type-conventions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/type-conventions.txt"))) ("unstable-list-lib" . #hash((author . "ryanc@racket-lang.org samth@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-list-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-list-lib.txt"))) ("generic-bind" . #hash((author . "stchang@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "generic-bind" "doc/generic-bind@generic-bind/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/generic-bind.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/generic-bind.txt"))) ("alexis-collections" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "alexis-collections" "doc/alexis-collections@alexis-collections/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-collections.txt") (test-failure-log . "server/built/test-fail/alexis-collections.txt") (test-success-log . #f))) ("distro-build-doc" . #hash((author . "mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "distro-build" "doc/distro-build@distro-build-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-doc.txt"))) ("jack-mock" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "mock" "doc/mock@jack-mock/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jack-mock.txt") (test-failure-log . "server/built/test-fail/jack-mock.txt") (test-success-log . #f))) ("systemd" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "systemd" "doc/systemd@systemd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/systemd.txt") (test-failure-log . "server/built/test-fail/systemd.txt") (test-success-log . #f))) ("forth" . #hash((author . "types@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "forth" "doc/forth@forth/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forth.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forth.txt"))) ("sudo" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "sudo" "doc/sudo@sudo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sudo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sudo.txt"))) ("aperetif" . #hash((author . "mild.taste@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aperetif.txt") (test-failure-log . "server/built/test-fail/aperetif.txt") (test-success-log . #f))) ("arroy" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/arroy.txt") (test-failure-log . "server/built/test-fail/arroy.txt") (test-success-log . #f))) ("pprint" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "pprint" "doc/pprint@pprint/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pprint.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pprint.txt"))) ("unstable-lib" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-lib.txt"))) ("csp" . #hash((author . "mb@mbtype.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csp.txt") (test-failure-log . "server/built/test-fail/csp.txt") (test-success-log . #f))) ("table-panel" . #hash((author . "spdegabrielle@gmail.com m.douglas.williams@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "table-panel" "doc/table-panel@table-panel/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/table-panel.txt") (test-failure-log . "server/built/test-fail/table-panel.txt") (test-success-log . #f))) ("lipics" . #hash((author . "asumu@ccs.neu.edu stamourv@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "lipics" "doc/lipics@lipics/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lipics.txt") (test-failure-log . "server/built/test-fail/lipics.txt") (test-success-log . #f))) ("berkeley" . #hash((author . "guoguo12@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/berkeley.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("binary-class-dbf" . #hash((author . "kalimehtar@mail.ru") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-dbf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-dbf.txt"))) ("libuuid" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "libuuid" "doc/libuuid@libuuid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libuuid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libuuid.txt"))) ("sxml" . #hash((author . "clements@brinckerhoff.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "sxml" "doc/sxml@sxml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sxml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sxml.txt"))) ("ds-store-doc" . #hash((docs . (#s(doc/main "ds-store" "doc/ds-store@ds-store-doc/index.html"))))) ("ecmascript" . #hash((author . "leo@lwh.jp") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "ecmascript" "doc/ecmascript@ecmascript/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ecmascript.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ecmascript.txt"))) ("static-rename" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "static-rename" "doc/static-rename@static-rename/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/static-rename.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/static-rename.txt"))) ("send-exp" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/send-exp.txt") (test-failure-log . "server/built/test-fail/send-exp.txt") (test-success-log . #f))) ("spreadsheet-editor" . #hash((author . "dpavlov@ipa.nw.ru") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spreadsheet-editor.txt") (test-failure-log . "server/built/test-fail/spreadsheet-editor.txt") (test-success-log . #f))) ("remote-shell" . #hash((author . "mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remote-shell.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remote-shell.txt"))) ("in-new-directory" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "in-new-directory" "doc/in-new-directory@in-new-directory/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/in-new-directory.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/in-new-directory.txt"))) ("glob" . #hash((author . "types@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "glob" "doc/glob@glob/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glob.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glob.txt"))) ("measures" . #hash((author . "laurent.orseau@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/measures.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/measures.txt"))) ("google" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/google.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/google.txt"))) ("Chinese-4-Stratego" . #hash((author . "lolisa@marisa.moe") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "chinese-4-stratego" "doc/chinese-4-stratego@Chinese-4-Stratego/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Chinese-4-Stratego.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Chinese-4-Stratego.txt"))) ("rtnl" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rtnl.txt") (test-failure-log . "server/built/test-fail/rtnl.txt") (test-success-log . #f))) ("3s" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/3s.txt") (docs . (#s(doc/main "3s" "doc/3s@3s/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/3s.txt") (test-failure-log . "server/built/test-fail/3s.txt") (test-success-log . #f))) ("flexpr" . #hash((author . "greghendershott@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "flexpr" "doc/flexpr@flexpr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/flexpr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/flexpr.txt"))) ("bcrypt" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/bcrypt.txt") (success-log . "server/built/install/bcrypt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bcrypt.txt"))) ("poppler-win32-i386" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-win32-i386.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-win32-i386.txt"))) ("sl2014" . #hash((author . "matthias@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "sl2014" "doc/sl2014@sl2014/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sl2014.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sl2014.txt"))) ("cpu-affinity" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "cpu-affinity" "doc/cpu-affinity@cpu-affinity/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cpu-affinity.txt") (test-failure-log . "server/built/test-fail/cpu-affinity.txt") (test-success-log . #f))) ("collections-lens" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "collections-lens" "doc/collections-lens@collections-lens/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections-lens.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections-lens.txt"))) ("racket-cheat" . #hash((docs . (#s(doc/main "racket-cheat" "doc/racket-cheat@racket-cheat/index.html"))))) ("macro-debugger" . #hash((docs . (#s(doc/main "macro-debugger" "doc/macro-debugger@macro-debugger/index.html"))))) ("lti-freq-domain-toolbox" . #hash((author . "iastefan@outlook.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lti-freq-domain-toolbox.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lti-freq-domain-toolbox.txt"))) ("net-cookies" . #hash((author . "jmj@fellowhuman.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "cookies" "doc/cookies@net-cookies/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-cookies.txt") (test-failure-log . "server/built/test-fail/net-cookies.txt") (test-success-log . #f))) ("racket-index" . #hash((docs . (#s(doc/main "search" "doc/search@racket-index/index.html") #s(doc/main "license" "doc/license@racket-index/index.html") #s(doc/main "local-redirect" "doc/local-redirect@racket-index/index.html") #s(doc/main "release" "doc/release@racket-index/index.html") #s(doc/main "acks" "doc/acks@racket-index/index.html"))))) ("minipascal" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/minipascal.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/minipascal.txt"))) ("trace" . #hash((docs . (#s(doc/main "trace" "doc/trace@trace/index.html"))))) ("cc4101-handin" . #hash((author . "ifigueroap@gmail.com etanter@dcc.uchile.cl") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cc4101-handin.txt") (test-failure-log . "server/built/test-fail/cc4101-handin.txt") (test-success-log . #f))) ("scrypt" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/scrypt.txt") (success-log . "server/built/install/scrypt.txt") (test-failure-log . "server/built/test-fail/scrypt.txt") (test-success-log . #f))) ("find-parent-dir" . #hash((author . "samth@ccs.neu.edu eric.hanchrow@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/find-parent-dir.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/find-parent-dir.txt"))) ("gui-pkg-manager" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-pkg-manager.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-pkg-manager.txt"))) ("rmacs" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/rmacs.txt") (success-log . "server/built/install/rmacs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rmacs.txt"))) ("drracket-tool-doc" . #hash((docs . (#s(doc/main "drracket-tools" "doc/drracket-tools@drracket-tool-doc/index.html"))))) ("automata" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata.txt"))) ("dropbox" . #hash((author . "stchang@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "dropbox" "doc/dropbox@dropbox/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dropbox.txt") (test-failure-log . "server/built/test-fail/dropbox.txt") (test-success-log . #f))) ("unstable-2d" . #hash((author . "robby@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-2d.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-2d.txt"))) ("readline-doc" . #hash((docs . (#s(doc/main "readline" "doc/readline@readline-doc/index.html"))))) ("rosetta" . #hash((author . "antonio.menezes.leitao@gmail.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/rosetta.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rosetta.txt") (test-failure-log . "server/built/test-fail/rosetta.txt") (test-success-log . #f))) ("net-jwt" . #hash((author . "jmj@fellowhuman.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "jwt" "doc/jwt@net-jwt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-jwt.txt") (test-failure-log . "server/built/test-fail/net-jwt.txt") (test-success-log . #f))) ("pict3d-orig" . #hash((author . "neil.toronto@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/none "typed-opengl") #s(doc/none "pict3d"))) (failure-log . "server/built/fail/pict3d-orig.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("compatibility-doc" . #hash((docs . (#s(doc/main "mzlib" "doc/mzlib@compatibility-doc/index.html"))))) ("redex-chk" . #hash((author . "sgtamk@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-chk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-chk.txt"))) ("debug" . #hash((author . "alexander@knauth.org mb@mbtype.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "debug" "doc/debug@debug/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/debug.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/debug.txt"))) ("racket-quandl" . #hash((author . "malcolm.still@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "racket-quandl" "doc/racket-quandl@racket-quandl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-quandl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-quandl.txt"))) ("benchmark" . #hash((author . "stamourv@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "benchmark" "doc/benchmark@benchmark/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/benchmark.txt") (test-failure-log . "server/built/test-fail/benchmark.txt") (test-success-log . #f))) ("raco-bug" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-bug.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-bug.txt"))) ("client-cookies" . #hash((author . "kalimehtar@mail.ru") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/client-cookies.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/client-cookies.txt"))) ("molis-hai" . #hash((author . "clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "molis-hai" "doc/molis-hai@molis-hai/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/molis-hai.txt") (test-failure-log . "server/built/test-fail/molis-hai.txt") (test-success-log . #f))) ("overeasy" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "overeasy" "doc/overeasy@overeasy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/overeasy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/overeasy.txt"))) ("pollen-tfl" . #hash((author . "mb@mbtype.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "pollen-tfl" "doc/pollen-tfl@pollen-tfl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-tfl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-tfl.txt"))) ("ansi" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/ansi.txt") (success-log . "server/built/install/ansi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ansi.txt"))) ("reprovide-lang" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "reprovide" "doc/reprovide@reprovide-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reprovide-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reprovide-lang.txt"))) ("cur" . #hash((author . "wjb@williamjbowman.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/cur.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cur.txt"))) ("numspell" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "numspell" "doc/numspell@numspell/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/numspell.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/numspell.txt"))) ("remote-shell-doc" . #hash((author . "mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "remote-shell" "doc/remote-shell@remote-shell-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remote-shell-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remote-shell-doc.txt"))) ("gregor-lib" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor-lib.txt"))) ("ragg" . #hash((author . "dyoo@hashcollision.org clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "ragg" "doc/ragg@ragg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ragg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ragg.txt"))) ("cow-repl" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cow-repl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cow-repl.txt"))) ("r5rs-doc" . #hash((docs . (#s(doc/main "r5rs" "doc/r5rs@r5rs-doc/index.html"))))) ("sfont" . #hash((author . "capo.daniele@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "sfont" "doc/sfont@sfont/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sfont.txt") (test-failure-log . "server/built/test-fail/sfont.txt") (test-success-log . #f))) ("mischief" . #hash((author . "cce@racket-lang.org") (conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (#s(doc/extract "mischief" "doc/mischief@mischief/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mischief.txt") (test-failure-log . "server/built/test-fail/mischief.txt") (test-success-log . #f))) ("plt-web-doc" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org samth@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "plt-web" "doc/plt-web@plt-web-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-web-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-web-doc.txt"))) ("unstable-doc" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "unstable" "doc/unstable@unstable-doc/index.html") #s(doc/main "unstable-gui" "doc/unstable-gui@unstable-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-doc.txt"))) ("pict-snip-doc" . #hash((docs . (#s(doc/main "pict-snip" "doc/pict-snip@pict-snip-doc/index.html"))))) ("htdp-doc" . #hash((docs . (#s(doc/main "teachpack" "doc/teachpack@htdp-doc/index.html") #s(doc/main "htdp-ptr" "doc/htdp-ptr@htdp-doc/index.html") #s(doc/main "htdp" "doc/htdp@htdp-doc/index.html") #s(doc/main "htdp-langs" "doc/htdp-langs@htdp-doc/index.html") #s(doc/main "stepper" "doc/stepper@htdp-doc/index.html") #s(doc/main "turtles" "doc/turtles@htdp-doc/index.html") #s(doc/main "test-engine" "doc/test-engine@htdp-doc/index.html") #s(doc/main "graphics" "doc/graphics@htdp-doc/index.html"))))) ("contract-repl" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/contract-repl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/contract-repl.txt"))) ("net-doc" . #hash((docs . (#s(doc/main "net" "doc/net@net-doc/index.html") #s(doc/main "osx-ssl" "doc/osx-ssl@net-doc/index.html") #s(doc/main "win32-ssl" "doc/win32-ssl@net-doc/index.html"))))) ("distro-build-server" . #hash((author . "mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-server.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-server.txt"))) ("optimization-coach" . #hash((docs . (#s(doc/main "optimization-coach" "doc/optimization-coach@optimization-coach/index.html"))))) ("soundex" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "soundex" "doc/soundex@soundex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/soundex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/soundex.txt"))) ("ring-buffer" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "ring-buffer" "doc/ring-buffer@ring-buffer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ring-buffer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ring-buffer.txt"))) ("icfp-2014-contracts-talk" . #hash((author . "robby@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/icfp-2014-contracts-talk.txt") (test-failure-log . "server/built/test-fail/icfp-2014-contracts-talk.txt") (test-success-log . #f))) ("racketeer" . #hash((author . "emailmiraleung@gmail.com jordanelder@outlook.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketeer.txt") (test-failure-log . "server/built/test-fail/racketeer.txt") (test-success-log . #f))) ("unstable" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable.txt"))) ("rwind" . #hash((author . "laurent.orseau@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rwind.txt") (test-failure-log . "server/built/test-fail/rwind.txt") (test-success-log . #f))) ("ebml" . #hash((author . "clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "ebml" "doc/ebml@ebml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ebml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ebml.txt"))) ("classicthesis-scribble" . #hash((author . "stamourv@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/classicthesis-scribble.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/classicthesis-scribble.txt"))) ("srfi-doc" . #hash((docs . (#s(doc/main "srfi" "doc/srfi@srfi-doc/index.html"))))) ("pkg-build" . #hash((author . "mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/pkg-build.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("poppler-i386-macosx" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-i386-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-i386-macosx.txt"))) ("mosquitto-ffi" . #hash((author . "bartbes+racket@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mosquitto-ffi.txt") (test-failure-log . "server/built/test-fail/mosquitto-ffi.txt") (test-success-log . #f))) ("bazaar" . #hash((author . "laurent.orseau@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bazaar.txt") (test-failure-log . "server/built/test-fail/bazaar.txt") (test-success-log . #f))) ("color-flood" . #hash((author . "laurent.orseau@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/color-flood.txt") (test-failure-log . "server/built/test-fail/color-flood.txt") (test-success-log . #f))) ("pop-pl" . #hash((author . "spencer@florence.io") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pop-pl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pop-pl.txt"))) ("cpuinfo" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "cpuinfo" "doc/cpuinfo@cpuinfo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cpuinfo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cpuinfo.txt"))) ("2d-doc" . #hash((docs . (#s(doc/main "2d" "doc/2d@2d-doc/index.html"))))) ("temp-c-test" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c-test.txt") (test-failure-log . "server/built/test-fail/temp-c-test.txt") (test-success-log . #f))) ("syntax-lang" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "syntax-lang" "doc/syntax-lang@syntax-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-lang.txt"))) ("unix-socket-doc" . #hash((docs . (#s(doc/main "unix-socket" "doc/unix-socket@unix-socket-doc/index.html"))))) ("hyphenate" . #hash((author . "mb@mbtype.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "hyphenate" "doc/hyphenate@hyphenate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hyphenate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hyphenate.txt"))) ("sysfs" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sysfs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sysfs.txt"))) ("bloggy" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bloggy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bloggy.txt"))) ("finalizer" . #hash((author . "kalimehtar@mail.ru") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "finalizer" "doc/finalizer@finalizer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/finalizer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/finalizer.txt"))) ("charterm" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "charterm" "doc/charterm@charterm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/charterm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/charterm.txt"))) ("yotsubAPI" . #hash((author . "gg@tfwno.gf") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "yotsubapi" "doc/yotsubapi@yotsubAPI/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/yotsubAPI.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/yotsubAPI.txt"))) ("persistent-array" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/persistent-array.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/persistent-array.txt"))) ("yaml" . #hash((author . "ejs@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "yaml" "doc/yaml@yaml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/yaml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/yaml.txt"))) ("memoize" . #hash((author . "clements@racket-lang.org dherman@mozilla.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "memoize" "doc/memoize@memoize/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/memoize.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/memoize.txt"))) ("rackunit-chk" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-chk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-chk.txt"))) ("drracket" . #hash((docs . (#s(doc/main "browser" "doc/browser@drracket/index.html") #s(doc/main "drracket" "doc/drracket@drracket/index.html") #s(doc/main "bug-report" "doc/bug-report@drracket/index.html") #s(doc/main "plt-installer" "doc/plt-installer@drracket/index.html") #s(doc/main "tool" "doc/tool@drracket/index.html") #s(doc/main "tools" "doc/tools@drracket/index.html"))))) ("pkg-index" . #hash((author . "jay@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/pkg-index.txt") (success-log . "server/built/install/pkg-index.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pkg-index.txt"))) ("xml-rpc" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "xml-rpc" "doc/xml-rpc@xml-rpc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xml-rpc.txt") (test-failure-log . "server/built/test-fail/xml-rpc.txt") (test-success-log . #f))) ("distributed-places-doc" . #hash((docs . (#s(doc/main "distributed-places" "doc/distributed-places@distributed-places-doc/index.html"))))) ("anarki" . #hash((author . "rokitna@hotmail.com arc.racket@akkartik.com zkanfer@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/anarki.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/anarki.txt"))) ("quad-tree" . #hash((author . "matias@fortlogic.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quad-tree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quad-tree.txt"))) ("option-bind" . #hash((author . "jmj@fellowhuman.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "option-bind" "doc/option-bind@option-bind/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/option-bind.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/option-bind.txt"))) ("stockfighter-racket" . #hash((author . "euler90h@gmail.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/stockfighter-racket.txt") (docs . (#s(doc/main "stockfighter-api" "doc/stockfighter-api@stockfighter-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stockfighter-racket.txt") (test-failure-log . "server/built/test-fail/stockfighter-racket.txt") (test-success-log . #f))) ("refined-acl2" . #hash((author . "cce@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/refined-acl2.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("set-exp" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "set-exp" "doc/set-exp@set-exp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/set-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/set-exp.txt"))) ("pict3d-die-cut" . #hash((author . "mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "pict3d-die-cut" "doc/pict3d-die-cut@pict3d-die-cut/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pict3d-die-cut.txt") (test-failure-log . "server/built/test-fail/pict3d-die-cut.txt") (test-success-log . #f))) ("termios" . #hash((author . "bprzygoda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/termios.txt") (success-log . "server/built/install/termios.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/termios.txt"))) ("html-writing" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "html-writing" "doc/html-writing@html-writing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/html-writing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/html-writing.txt"))) ("shootout" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "shootout" "doc/shootout@shootout/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/shootout.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/shootout.txt"))) ("option-contract-doc" . #hash((docs . (#s(doc/main "option-contract" "doc/option-contract@option-contract-doc/index.html"))))) ("parser-tools-doc" . #hash((docs . (#s(doc/main "parser-tools" "doc/parser-tools@parser-tools-doc/index.html"))))) ("pkg-dep-draw" . #hash((author . "mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "pkg-dep-draw" "doc/pkg-dep-draw@pkg-dep-draw/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pkg-dep-draw.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pkg-dep-draw.txt"))) ("lux" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "lux" "doc/lux@lux/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lux.txt"))) ("persistent-union-find" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/persistent-union-find.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/persistent-union-find.txt"))) ("simple-xlsx" . #hash((author . "chenxiao770117@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "simple-xlsx" "doc/simple-xlsx@simple-xlsx/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-xlsx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-xlsx.txt"))) ("slideshow-repl" . #hash((author . "mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "slideshow-repl" "doc/slideshow-repl@slideshow-repl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-repl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slideshow-repl.txt"))) ("plai-doc" . #hash((docs . (#s(doc/main "plai" "doc/plai@plai-doc/index.html"))))) ("threading" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "threading" "doc/threading@threading/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/threading.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/threading.txt"))) ("stomp" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "stomp" "doc/stomp@stomp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stomp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stomp.txt"))) ("drdr" . #hash((author . "jay@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drdr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drdr.txt"))) ("algol60" . #hash((docs . (#s(doc/main "algol60" "doc/algol60@algol60/index.html"))))) ("semilit" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/semilit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/semilit.txt"))) ("mediafile" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "mediafile" "doc/mediafile@mediafile/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mediafile.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mediafile.txt"))) ("2htdp-typed" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "2htdp-typed" "doc/2htdp-typed@2htdp-typed/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/2htdp-typed.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/2htdp-typed.txt"))) ("point-free" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "point-free" "doc/point-free@point-free/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/point-free.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/point-free.txt"))) ("identikon" . #hash((author . "info@v25media.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "identikon" "doc/identikon@identikon/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/identikon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/identikon.txt"))) ("images-doc" . #hash((docs . (#s(doc/main "images" "doc/images@images-doc/index.html"))))) ("libtoxcore-racket" . #hash((author . "lehi@tosk.in") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "libtoxcore-racket" "doc/libtoxcore-racket@libtoxcore-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libtoxcore-racket.txt") (test-failure-log . "server/built/test-fail/libtoxcore-racket.txt") (test-success-log . #f))) ("pcf" . #hash((author . "dvanhorn@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/none "pcf") #s(doc/salvage "redex-to-lang" "doc/redex-to-lang@pcf/index.html"))) (failure-log . "server/built/fail/pcf.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("rackonsole" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "rackonsole" "doc/rackonsole@rackonsole/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackonsole.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackonsole.txt"))) ("sirmail" . #hash((author . "mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sirmail.txt") (test-failure-log . "server/built/test-fail/sirmail.txt") (test-success-log . #f))) ("cur-test" . #hash((author . "wjb@williamjbowman.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/cur-test.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur-test.txt") (test-failure-log . "server/built/test-fail/cur-test.txt") (test-success-log . #f))) ("cur-lib" . #hash((author . "wjb@williamjbowman.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/cur-lib.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cur-lib.txt"))) ("lang-slide" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lang-slide.txt") (test-failure-log . "server/built/test-fail/lang-slide.txt") (test-success-log . #f))) ("match-string" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "match-string" "doc/match-string@match-string/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/match-string.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/match-string.txt"))) ("python" . #hash((author . "pedropramos@tecnico.ulisboa.pt") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/python.txt") (test-failure-log . "server/built/test-fail/python.txt") (test-success-log . #f))) ("alexknauth-my-object" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "my-object" "doc/my-object@alexknauth-my-object/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexknauth-my-object.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexknauth-my-object.txt"))) ("gui-pkg-manager-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "gui-pkg-manager" "doc/gui-pkg-manager@gui-pkg-manager-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-pkg-manager-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-pkg-manager-doc.txt"))) ("c" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/salvage "c" "doc/c@c/index.html"))) (failure-log . "server/built/fail/c.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("cldr-dates-modern" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "cldr-dates-modern" "doc/cldr-dates-modern@cldr-dates-modern/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-dates-modern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-dates-modern.txt"))) ("mzcom" . #hash((docs . (#s(doc/main "mzcom" "doc/mzcom@mzcom/index.html"))))) ("slatex" . #hash((docs . (#s(doc/main "slatex-wrap" "doc/slatex-wrap@slatex/index.html"))))) ("curly-fn" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "curly-fn" "doc/curly-fn@curly-fn/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/curly-fn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/curly-fn.txt"))) ("games" . #hash((docs . (#s(doc/main "gl-board-game" "doc/gl-board-game@games/index.html") #s(doc/main "games" "doc/games@games/index.html") #s(doc/main "cards" "doc/cards@games/index.html"))))) ("slideshow-latex" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "slideshow-latex" "doc/slideshow-latex@slideshow-latex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-latex.txt") (test-failure-log . "server/built/test-fail/slideshow-latex.txt") (test-success-log . #f))) ("cur-doc" . #hash((author . "wjb@williamjbowman.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/cur-doc.txt") (docs . (#s(doc/main "cur" "doc/cur@cur-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur-doc.txt") (test-failure-log . "server/built/test-fail/cur-doc.txt") (test-success-log . #f))) ("fme" . #hash((author . "sgtamk@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "fme" "doc/fme@fme/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fme.txt"))) ("rsvg" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "rsvg" "doc/rsvg@rsvg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsvg.txt") (test-failure-log . "server/built/test-fail/rsvg.txt") (test-success-log . #f))) ("oii-422-handin-client" . #hash((author . "ifigueroap@gmail.com ") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/oii-422-handin-client.txt") (test-failure-log . "server/built/test-fail/oii-422-handin-client.txt") (test-success-log . #f))) ("version-case" . #hash((author . "samth@racket-lang.org dyoo@hashcollision.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "version-case" "doc/version-case@version-case/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/version-case.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/version-case.txt"))) ("automata-test" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata-test.txt"))) ("canonicalize-path" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "canonicalize-path" "doc/canonicalize-path@canonicalize-path/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/canonicalize-path.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/canonicalize-path.txt"))) ("csv" . #hash((author . "linjunhalida@gmail.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/csv.txt") (docs . (#s(doc/main "csv" "doc/csv@csv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csv.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csv.txt"))) ("gui-doc" . #hash((docs . (#s(doc/main "mrlib" "doc/mrlib@gui-doc/index.html") #s(doc/main "framework" "doc/framework@gui-doc/index.html") #s(doc/main "gui" "doc/gui@gui-doc/index.html") #s(doc/main "embedded-gui" "doc/embedded-gui@gui-doc/index.html"))))) ("unstable-pretty-lib" . #hash((author . "cce@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-pretty-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-pretty-lib.txt"))) ("binary-class-exif" . #hash((author . "kalimehtar@mail.ru") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-exif.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-exif.txt"))) ("zeromq" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "zeromq" "doc/zeromq@zeromq/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq.txt") (test-failure-log . "server/built/test-fail/zeromq.txt") (test-success-log . #f))) ("planet2-rewrite-test" . #hash((author . "jay.mccarthy+not@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/planet2-rewrite-test.txt") (test-failure-log . "server/built/test-fail/planet2-rewrite-test.txt") (test-success-log . #f))) ("plt-services" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-services.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-services.txt"))) ("markparam" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam.txt"))) ("s3-sync" . #hash((author . "mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "s3-sync" "doc/s3-sync@s3-sync/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/s3-sync.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/s3-sync.txt"))) ("temp-c-lib" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/temp-c-lib.txt"))) ("levenshtein" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "levenshtein" "doc/levenshtein@levenshtein/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/levenshtein.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/levenshtein.txt"))) ("fancy-app" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fancy-app.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fancy-app.txt"))) ("lux-charterm" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/salvage "lux-charterm" "doc/lux-charterm@lux-charterm/index.html"))) (failure-log . "server/built/fail/lux-charterm.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("r-lexer" . #hash((author . "leif@leifandersen.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "r-lexer" "doc/r-lexer@r-lexer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r-lexer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r-lexer.txt"))) ("split-by" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/split-by.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/split-by.txt"))) ("distro-build" . #hash((author . "mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build.txt"))) ("postfix-dot-notation" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "postfix-dot-notation" "doc/postfix-dot-notation@postfix-dot-notation/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/postfix-dot-notation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/postfix-dot-notation.txt"))) ("mongodb" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "mongodb" "doc/mongodb@mongodb/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mongodb.txt") (test-failure-log . "server/built/test-fail/mongodb.txt") (test-success-log . #f))) ("kw-make-struct" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "kw-make-struct" "doc/kw-make-struct@kw-make-struct/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kw-make-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kw-make-struct.txt"))) ("cover" . #hash((author . "spencer@florence.io") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "cover" "doc/cover@cover/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover.txt"))) ("set" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . "server/built/deps/set.txt") (docs . (#s(doc/main "new-set" "doc/new-set@set/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/set.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/set.txt"))) ("acmsmall" . #hash((author . "stamourv@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "acmsmall" "doc/acmsmall@acmsmall/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/acmsmall.txt") (test-failure-log . "server/built/test-fail/acmsmall.txt") (test-success-log . #f))) ("rsc3" . #hash((author . "mushk45@gmail.com mkhafate@calpoly.edu clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsc3.txt") (test-failure-log . "server/built/test-fail/rsc3.txt") (test-success-log . #f))) ("spvector" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "spvector" "doc/spvector@spvector/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spvector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/spvector.txt"))) ("compiler-goodies" . #hash((author . "leif@leifandersen.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "compiler-goodies" "doc/compiler-goodies@compiler-goodies/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/compiler-goodies.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/compiler-goodies.txt"))) ("my-cond" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "my-cond" "doc/my-cond@my-cond/index.html") #s(doc/main "my-cond-iffy" "doc/my-cond-iffy@my-cond/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/my-cond.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/my-cond.txt"))) ("spmatrix" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "spmatrix" "doc/spmatrix@spmatrix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spmatrix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/spmatrix.txt"))) ("pollen" . #hash((author . "mb@mbtype.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "pollen" "doc/pollen@pollen/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen.txt"))) ("vlc" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "vlc" "doc/vlc@vlc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vlc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vlc.txt"))) ("redis" . #hash((author . "stchang@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redis.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redis.txt"))) ("asyncunit" . #hash((author . "schuster@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "asyncunit" "doc/asyncunit@asyncunit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asyncunit.txt") (test-failure-log . "server/built/test-fail/asyncunit.txt") (test-success-log . #f))) ("ftree" . #hash((author . "stchang@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "ftree" "doc/ftree@ftree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ftree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ftree.txt"))) ("dbm" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "dbm" "doc/dbm@dbm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dbm.txt") (test-failure-log . "server/built/test-fail/dbm.txt") (test-success-log . #f))) ("munger" . #hash((author . "ray.racine@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/munger.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/munger.txt"))) ("libnotify" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "libnotify" "doc/libnotify@libnotify/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libnotify.txt") (test-failure-log . "server/built/test-fail/libnotify.txt") (test-success-log . #f))) ("parenlog" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "parenlog" "doc/parenlog@parenlog/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parenlog.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parenlog.txt"))) ("sicp" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "sicp-manual" "doc/sicp-manual@sicp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sicp.txt") (test-failure-log . "server/built/test-fail/sicp.txt") (test-success-log . #f))) ("datatype" . #hash((author . "sgtamk@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/datatype.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/datatype.txt"))) ("parsack" . #hash((author . "stchang@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "parsack" "doc/parsack@parsack/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parsack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parsack.txt"))) ("mode-lambda" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "mode-lambda" "doc/mode-lambda@mode-lambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mode-lambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mode-lambda.txt"))) ("drracket-vim-tool" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-vim-tool.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-vim-tool.txt"))) ("datalog" . #hash((docs . (#s(doc/main "datalog" "doc/datalog@datalog/index.html"))))) ("disassemble" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/disassemble.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/disassemble.txt"))) ("pipe" . #hash((author . "ray.racine@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "pipe" "doc/pipe@pipe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pipe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pipe.txt"))) ("collections" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "collections" "doc/collections@collections/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections.txt"))) ("scribble-doc" . #hash((docs . (#s(doc/main "demo-m1" "doc/demo-m1@scribble-doc/index.html") #s(doc/main "demo-manual-m2" "doc/demo-manual-m2@scribble-doc/index.html") #s(doc/main "demo-manual-m1" "doc/demo-manual-m1@scribble-doc/index.html") #s(doc/main "scribble" "doc/scribble@scribble-doc/index.html") #s(doc/main "demo-manual-s2" "doc/demo-manual-s2@scribble-doc/index.html") #s(doc/main "demo-s1" "doc/demo-s1@scribble-doc/index.html") #s(doc/main "scribble-pp" "doc/scribble-pp@scribble-doc/index.html") #s(doc/main "demo-manual-s1" "doc/demo-manual-s1@scribble-doc/index.html") #s(doc/main "scriblib" "doc/scriblib@scribble-doc/index.html") #s(doc/main "demo-s2" "doc/demo-s2@scribble-doc/index.html") #s(doc/main "demo-m2" "doc/demo-m2@scribble-doc/index.html"))))) ("cldr-bcp47" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "cldr-bcp47-timezone" "doc/cldr-bcp47-timezone@cldr-bcp47/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-bcp47.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-bcp47.txt"))) ("slideshow-pretty" . #hash((author . "leif@leifandersen.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-pretty.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slideshow-pretty.txt"))) ("lambdajam-2015-racket-pl-pl" . #hash((author . "robby@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lambdajam-2015-racket-pl-pl.txt") (test-failure-log . "server/built/test-fail/lambdajam-2015-racket-pl-pl.txt") (test-success-log . #f))) ("gut" . #hash((author . "ray.racine@gmail.com") (conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (#s(doc/extract "manual" "doc/manual@gut/index.html") #s(doc/extract "gut" "doc/gut@gut/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gut.txt") (test-failure-log . "server/built/test-fail/gut.txt") (test-success-log . #f))) ("marketplace" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/marketplace.txt") (docs . (#s(doc/main "marketplace" "doc/marketplace@marketplace/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/marketplace.txt") (test-failure-log . "server/built/test-fail/marketplace.txt") (test-success-log . #f))) ("script-plugin" . #hash((author . "laurent.orseau@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "script-plugin" "doc/script-plugin@script-plugin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/script-plugin.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/script-plugin.txt"))) ("wffi" . #hash((author . "greghendershott@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wffi.txt") (test-failure-log . "server/built/test-fail/wffi.txt") (test-success-log . #f))) ("plot-bestfit" . #hash((author . "spencer@florence.io") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/none "bestfit"))) (failure-log . "server/built/fail/plot-bestfit.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("markdown" . #hash((author . "greghendershott@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markdown.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markdown.txt"))) ("plt-web" . #hash((author . "mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-web.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-web.txt"))) ("unstable-contract-lib" . #hash((author . "robby@racket-lang.org ryanc@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-contract-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-contract-lib.txt"))) ("colon-kw" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "colon-kw" "doc/colon-kw@colon-kw/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colon-kw.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colon-kw.txt"))) ("quad" . #hash((author . "mb@mbtype.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "quad" "doc/quad@quad/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quad.txt"))) ("web-server-doc" . #hash((docs . (#s(doc/main "web-server-internal" "doc/web-server-internal@web-server-doc/index.html") #s(doc/main "web-server" "doc/web-server@web-server-doc/index.html") #s(doc/main "continue" "doc/continue@web-server-doc/index.html"))))) ("formica" . #hash((author . "samsergey@yandex.ru") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/formica.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("towers" . #hash((author . "laurent.orseau@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/towers.txt") (test-failure-log . "server/built/test-fail/towers.txt") (test-success-log . #f))) ("eopl" . #hash((docs . (#s(doc/main "eopl" "doc/eopl@eopl/index.html"))))) ("s-lib" . #hash((author . "vlad.piersec@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/s-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/s-lib.txt"))) ("generic-syntax-expanders" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/generic-syntax-expanders.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("plt-web-lib" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org samth@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-web-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-web-lib.txt"))) ("postmark" . #hash((author . "clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "postmark" "doc/postmark@postmark/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/postmark.txt") (test-failure-log . "server/built/test-fail/postmark.txt") (test-success-log . #f))) ("honu" . #hash((author . "mflatt@racket-lang.org rafkind@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "honu" "doc/honu@honu/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/honu.txt") (test-failure-log . "server/built/test-fail/honu.txt") (test-success-log . #f))) ("quickcheck" . #hash((author . "ifigueroap@gmail.com sperber@deinprogramm.de") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "quickcheck" "doc/quickcheck@quickcheck/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quickcheck.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quickcheck.txt"))) ("roomba" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "roomba" "doc/roomba@roomba/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/roomba.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/roomba.txt"))) ("cldr-core" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "cldr-core" "doc/cldr-core@cldr-core/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-core.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-core.txt"))) ("syntax-color-doc" . #hash((docs . (#s(doc/main "syntax-color" "doc/syntax-color@syntax-color-doc/index.html"))))) ("unicode-properties" . #hash((author . "clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "unicode" "doc/unicode@unicode-properties/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unicode-properties.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unicode-properties.txt"))) ("c-defs" . #hash((author . "peblairman@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "c-defs" "doc/c-defs@c-defs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/c-defs.txt") (test-failure-log . "server/built/test-fail/c-defs.txt") (test-success-log . #f))) ("osc" . #hash((author . "clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "osc" "doc/osc@osc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/osc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/osc.txt"))) ("pidec" . #hash((author . "luis.osa.gdc@gmail.com ") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "pidec" "doc/pidec@pidec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pidec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pidec.txt"))) ("remote-shell-lib" . #hash((author . "mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remote-shell-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remote-shell-lib.txt"))) ("drracket-paredit" . #hash((author . "yj_qww6@126.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-paredit.txt") (test-failure-log . "server/built/test-fail/drracket-paredit.txt") (test-success-log . #f))) ("jack-scribble-example" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "scribble-example" "doc/scribble-example@jack-scribble-example/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jack-scribble-example.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jack-scribble-example.txt"))) ("kw-utils" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "kw-utils" "doc/kw-utils@kw-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kw-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kw-utils.txt"))) ("binary-class" . #hash((author . "kalimehtar@mail.ru") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "binary-class" "doc/binary-class@binary-class/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class.txt"))) ("dm" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "dm" "doc/dm@dm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dm.txt") (test-failure-log . "server/built/test-fail/dm.txt") (test-success-log . #f))) ("poppler-x86-64-macosx" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-x86-64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-x86-64-macosx.txt"))) ("minikanren" . #hash((author . "asumu@ccs.neu.edu jhemann@umail.iu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "minikanren" "doc/minikanren@minikanren/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/minikanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/minikanren.txt"))) ("fulmar" . #hash((author . "earl.christopher@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "fulmar-doc" "doc/fulmar-doc@fulmar/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fulmar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fulmar.txt"))) ("cKanren" . #hash((author . "claire.alvis@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cKanren.txt") (test-failure-log . "server/built/test-fail/cKanren.txt") (test-success-log . #f))) ("frtime" . #hash((docs . (#s(doc/main "frtime" "doc/frtime@frtime/index.html"))))) ("unstable-flonum-lib" . #hash((author . "ntoronto@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-flonum-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-flonum-lib.txt"))) ("pkg-push" . #hash((author . "mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pkg-push.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pkg-push.txt"))) ("elf" . #hash((author . "code_man@cybnet.ch ") (conflicts-log . #f) (dep-failure-log . "server/built/deps/elf.txt") (docs . (#s(doc/main "elf" "doc/elf@elf/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/elf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/elf.txt"))) ("wrap" . #hash((author . "ray.racine@gmail.com") (conflicts-log . #s(conflicts/indirect "conflicts.txt")) (dep-failure-log . "server/built/deps/wrap.txt") (docs . (#s(doc/none "wrap-aws"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wrap.txt") (test-failure-log . "server/built/test-fail/wrap.txt") (test-success-log . #f))) ("trivial" . #hash((author . "types@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "trivial" "doc/trivial@trivial/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/trivial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/trivial.txt"))) ("gregor-doc" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "gregor" "doc/gregor@gregor-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor-doc.txt"))) ("markparam-doc" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "markparam" "doc/markparam@markparam-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam-doc.txt"))) ("snappy" . #hash((author . "asumu@ccs.neu.edu stchang@racket-lang.org ") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "snappy" "doc/snappy@snappy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/snappy.txt") (test-failure-log . "server/built/test-fail/snappy.txt") (test-success-log . #f))) ("kitco" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "kitco" "doc/kitco@kitco/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kitco.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kitco.txt"))) ("pfds" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "functional-data-structures" "doc/functional-data-structures@pfds/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pfds.txt") (test-failure-log . "server/built/test-fail/pfds.txt") (test-success-log . #f))) ("taglib" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "taglib" "doc/taglib@taglib/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/taglib.txt") (test-failure-log . "server/built/test-fail/taglib.txt") (test-success-log . #f))) ("lens" . #hash((author . "jackhfirth@gmail.com alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "lens" "doc/lens@lens/index.html") #s(doc/main "unstable-lens" "doc/unstable-lens@lens/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens.txt"))) ("mischief-dev" . #hash((author . "cce@racket-lang.org") (conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (#s(doc/extract "mischief" "doc/mischief@mischief-dev/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mischief-dev.txt") (test-failure-log . "server/built/test-fail/mischief-dev.txt") (test-success-log . #f))) ("racket-doc" . #hash((docs . (#s(doc/main "openssl" "doc/openssl@racket-doc/index.html") #s(doc/main "version" "doc/version@racket-doc/index.html") #s(doc/main "file" "doc/file@racket-doc/index.html") #s(doc/main "reference" "doc/reference@racket-doc/index.html") #s(doc/main "more" "doc/more@racket-doc/index.html") #s(doc/main "json" "doc/json@racket-doc/index.html") #s(doc/main "foreign" "doc/foreign@racket-doc/index.html") #s(doc/main "raco" "doc/raco@racket-doc/index.html") #s(doc/main "help" "doc/help@racket-doc/index.html") #s(doc/main "style" "doc/style@racket-doc/index.html") #s(doc/main "guide" "doc/guide@racket-doc/index.html") #s(doc/main "xml" "doc/xml@racket-doc/index.html") #s(doc/main "compatibility" "doc/compatibility@racket-doc/index.html") #s(doc/main "dynext" "doc/dynext@racket-doc/index.html") #s(doc/main "pkg" "doc/pkg@racket-doc/index.html") #s(doc/main "scheme" "doc/scheme@racket-doc/index.html") #s(doc/main "inside" "doc/inside@racket-doc/index.html") #s(doc/main "syntax" "doc/syntax@racket-doc/index.html") #s(doc/main "getting-started" "doc/getting-started@racket-doc/index.html"))))) ("rtmidi" . #hash((author . "clements@racket-lang.org m4burns@uwaterloo.ca") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "rtmidi" "doc/rtmidi@rtmidi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rtmidi.txt") (test-failure-log . "server/built/test-fail/rtmidi.txt") (test-success-log . #f))) ("eventfd" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "eventfd" "doc/eventfd@eventfd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/eventfd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/eventfd.txt"))) ("dos" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "dos" "doc/dos@dos/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dos.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dos.txt"))) ("plt-build-plot" . #hash((author . "mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-build-plot.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-build-plot.txt"))) ("control" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "control-manual" "doc/control-manual@control/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/control.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/control.txt"))) ("pict3d" . #hash((author . "neil.toronto@gmail.com jay.mccarthy@gmail.com mflatt@racket-lang.org alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "pict3d" "doc/pict3d@pict3d/index.html") #s(doc/main "typed-opengl" "doc/typed-opengl@pict3d/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/pict3d.txt") (success-log . "server/built/install/pict3d.txt") (test-failure-log . "server/built/test-fail/pict3d.txt") (test-success-log . #f))) ("fast-convert" . #hash((author . "kalimehtar@mail.ru") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "fast-convert" "doc/fast-convert@fast-convert/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fast-convert.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fast-convert.txt"))) ("org-mode" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/org-mode.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/org-mode.txt"))) ("hostname" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "hostname" "doc/hostname@hostname/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hostname.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hostname.txt"))) ("zordoz" . #hash((author . "types@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "zordoz" "doc/zordoz@zordoz/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zordoz.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zordoz.txt"))) ("git-slice" . #hash((author . "samth@ccs.neu.edu mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/git-slice.txt") (test-failure-log . "server/built/test-fail/git-slice.txt") (test-success-log . #f))) ("rackdis" . #hash((author . "euler90h@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "rackdis" "doc/rackdis@rackdis/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackdis.txt") (test-failure-log . "server/built/test-fail/rackdis.txt") (test-success-log . #f))) ("uri-old" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "uri-old" "doc/uri-old@uri-old/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uri-old.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/uri-old.txt"))) ("poppler-ppc-macosx" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-ppc-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-ppc-macosx.txt"))) ("apse" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/apse.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/apse.txt"))) ("kernel" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kernel.txt") (test-failure-log . "server/built/test-fail/kernel.txt") (test-success-log . #f))) ("planet2-example" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/planet2-example.txt") (test-failure-log . "server/built/test-fail/planet2-example.txt") (test-success-log . #f))) ("afl" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "afl" "doc/afl@afl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/afl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/afl.txt"))) ("glu-tessellate" . #hash((author . "mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "glu-tessellate" "doc/glu-tessellate@glu-tessellate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glu-tessellate.txt") (test-failure-log . "server/built/test-fail/glu-tessellate.txt") (test-success-log . #f))) ("mutable-match-lambda" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "mutable-match-lambda" "doc/mutable-match-lambda@mutable-match-lambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mutable-match-lambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mutable-match-lambda.txt"))) ("aosd" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aosd.txt") (test-failure-log . "server/built/test-fail/aosd.txt") (test-success-log . #f))) ("portaudio" . #hash((author . "clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "portaudio" "doc/portaudio@portaudio/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portaudio.txt") (test-failure-log . "server/built/test-fail/portaudio.txt") (test-success-log . #f))) ("distro-build-client" . #hash((author . "mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-client.txt"))) ("udev" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/udev.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/udev.txt"))) ("pollen-count" . #hash((author . "malcolm.still@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "pollen-count" "doc/pollen-count@pollen-count/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-count.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-count.txt"))) ("command-line-ext" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/command-line-ext.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("urlang" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . "server/built/deps/urlang.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/urlang.txt") (test-failure-log . "server/built/test-fail/urlang.txt") (test-success-log . #f))) ("db-doc" . #hash((docs . (#s(doc/main "db" "doc/db@db-doc/index.html"))))) ("tzdata" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tzdata.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tzdata.txt"))) ("plai-typed-s-exp-match" . #hash((author . "mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "plai-typed-s-exp-match" "doc/plai-typed-s-exp-match@plai-typed-s-exp-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-typed-s-exp-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-typed-s-exp-match.txt"))) ("readline-gpl" . #hash((author . "leif@leifandersen.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/readline-gpl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/readline-gpl.txt"))) ("fector" . #hash((author . "dvanhorn@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fector.txt"))) ("tesseract" . #hash((author . "lasfter@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tesseract.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tesseract.txt"))) ("sexp-diff" . #hash((author . "stamourv@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "sexp-diff" "doc/sexp-diff@sexp-diff/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sexp-diff.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sexp-diff.txt"))) ("livefrog" . #hash((author . "rmm@meta.ph") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/livefrog.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/livefrog.txt"))) ("gnucash" . #hash((author . "clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "gnucash" "doc/gnucash@gnucash/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gnucash.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gnucash.txt"))) ("memcached" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "memcached" "doc/memcached@memcached/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/memcached.txt") (test-failure-log . "server/built/test-fail/memcached.txt") (test-success-log . #f))) ("gir" . #hash((author . "kalimehtar@mail.ru") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "gir" "doc/gir@gir/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gir.txt") (test-failure-log . "server/built/test-fail/gir.txt") (test-success-log . #f))) ("protobj" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "protobj" "doc/protobj@protobj/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/protobj.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/protobj.txt"))) ("midi-readwrite" . #hash((author . "clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "midi" "doc/midi@midi-readwrite/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/midi-readwrite.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/midi-readwrite.txt"))) ("custom-load" . #hash((author . "ryanc@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "custom-load" "doc/custom-load@custom-load/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/custom-load.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/custom-load.txt"))) ("ppict-slide-grid" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ppict-slide-grid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ppict-slide-grid.txt"))) ("compact-annotations" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "compact-annotations" "doc/compact-annotations@compact-annotations/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/compact-annotations.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/compact-annotations.txt"))) ("profj" . #hash((author . "mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "profj" "doc/profj@profj/index.html") #s(doc/main "htdc" "doc/htdc@profj/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/profj.txt") (test-failure-log . "server/built/test-fail/profj.txt") (test-success-log . #f))) ("racket-lang-org" . #hash((author . "samth@racket-lang.org mflatt@racket-lang.org eli@barzilay.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/racket-lang-org.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("ss-rpc-server" . #hash((author . "sekk1e@yandex.ru") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "ss-rpc-server" "doc/ss-rpc-server@ss-rpc-server/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ss-rpc-server.txt") (test-failure-log . "server/built/test-fail/ss-rpc-server.txt") (test-success-log . #f))) ("hash-lambda" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "hash-lambda-toc" "doc/hash-lambda-toc@hash-lambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hash-lambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hash-lambda.txt"))) ("r6rs-doc" . #hash((docs . (#s(doc/main "r6rs" "doc/r6rs@r6rs-doc/index.html"))))) ("gls" . #hash((author . "kalimehtar@mail.ru") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "gls" "doc/gls@gls/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gls.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gls.txt"))) ("cover-coveralls" . #hash((author . "spencer@florence.io plessner.ryan@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-coveralls.txt") (test-failure-log . "server/built/test-fail/cover-coveralls.txt") (test-success-log . #f))) ("mred-designer" . #hash((author . "laurent.orseau@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mred-designer.txt") (test-failure-log . "server/built/test-fail/mred-designer.txt") (test-success-log . #f))) ("java-lexer" . #hash((author . "stamourv@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/java-lexer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/java-lexer.txt"))) ("Adapton" . #hash((author . "cwolfmentzer@gmail.com hammer@cs.umd.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "adapton" "doc/adapton@Adapton/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Adapton.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Adapton.txt"))) ("packet-socket" . #hash((author . "tonygarnockjones@gmail.com schuster@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/packet-socket.txt") (success-log . "server/built/install/packet-socket.txt") (test-failure-log . "server/built/test-fail/packet-socket.txt") (test-success-log . #f))) ("unstable-macro-testing-lib" . #hash((author . "ryanc@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-macro-testing-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-macro-testing-lib.txt"))) ("puresuri" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "puresuri" "doc/puresuri@puresuri/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/puresuri.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/puresuri.txt"))) ("semver" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "semver" "doc/semver@semver/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/semver.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/semver.txt"))) ("nlopt" . #hash((author . "kominek@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "nlopt" "doc/nlopt@nlopt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nlopt.txt") (test-failure-log . "server/built/test-fail/nlopt.txt") (test-success-log . #f))) ("dracula" . #hash((author . "cce@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/dracula.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("unstable-redex" . #hash((author . "ryanc@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "unstable-redex" "doc/unstable-redex@unstable-redex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-redex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-redex.txt"))) ("dlm-read" . #hash((author . "leif@leifandersen.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "dlm-read" "doc/dlm-read@dlm-read/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dlm-read.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dlm-read.txt"))) ("check-sexp-equal" . #hash((author . "zenspider@gmail.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/check-sexp-equal.txt") (docs . (#s(doc/main "check-sexp-equal" "doc/check-sexp-equal@check-sexp-equal/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/check-sexp-equal.txt") (test-failure-log . "server/built/test-fail/check-sexp-equal.txt") (test-success-log . #f))) ("dotmethod" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "dotmethod" "doc/dotmethod@dotmethod/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dotmethod.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dotmethod.txt"))) ("towers-server" . #hash((author . "laurent.orseau@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/towers-server.txt") (test-failure-log . "server/built/test-fail/towers-server.txt") (test-success-log . #f))) ("plt-service-monitor" . #hash((author . "mflatt@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "plt-service-monitor" "doc/plt-service-monitor@plt-service-monitor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-service-monitor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-service-monitor.txt"))) ("typed-stack" . #hash((author . "lehi@tosk.in") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "typed-stack" "doc/typed-stack@typed-stack/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-stack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-stack.txt"))) ("openmpi" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "mpi" "doc/mpi@openmpi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openmpi.txt") (test-failure-log . "server/built/test-fail/openmpi.txt") (test-success-log . #f))) ("string-constants-doc" . #hash((docs . (#s(doc/main "string-constants" "doc/string-constants@string-constants-doc/index.html"))))) ("aws" . #hash((author . "greghendershott@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "aws" "doc/aws@aws/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aws.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/aws.txt"))) ("scribble-code-examples" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "scribble-code-examples" "doc/scribble-code-examples@scribble-code-examples/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-code-examples.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-code-examples.txt"))) ("mysterx" . #hash((docs . (#s(doc/main "mysterx" "doc/mysterx@mysterx/index.html"))))) ("describe" . #hash((author . "mb@mbtype.com doug@cognidrome.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "describe" "doc/describe@describe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/describe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/describe.txt"))) ("rackterm" . #hash((author . "willghatch@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackterm.txt") (test-failure-log . "server/built/test-fail/rackterm.txt") (test-success-log . #f))) ("deinprogramm" . #hash((docs . (#s(doc/main "deinprogramm" "doc/deinprogramm@deinprogramm/index.html"))))) ("sgl" . #hash((docs . (#s(doc/main "sgl" "doc/sgl@sgl/index.html"))))) ("parted" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "parted" "doc/parted@parted/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parted.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parted.txt"))) ("unstable-flonum-doc" . #hash((author . "ntoronto@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "unstable-flonum" "doc/unstable-flonum@unstable-flonum-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-flonum-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-flonum-doc.txt"))) ("plai-typed" . #hash((author . "mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "plai-typed" "doc/plai-typed@plai-typed/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-typed.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-typed.txt"))) ("r7rs-lib" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r7rs-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r7rs-lib.txt"))) ("alexis-pvector" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "alexis-pvector" "doc/alexis-pvector@alexis-pvector/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-pvector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-pvector.txt"))) ("contract-profile" . #hash((docs . (#s(doc/main "contract-profile" "doc/contract-profile@contract-profile/index.html"))))) ("vector-struct" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "vector-struct" "doc/vector-struct@vector-struct/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vector-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vector-struct.txt"))) ("jack-posn" . #hash((author . "jackhfirth@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "posn" "doc/posn@jack-posn/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jack-posn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jack-posn.txt"))) ("wn" . #hash((author . "anurag@mendhekar.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/wn.txt") (docs . (#s(doc/main "wn" "doc/wn@wn/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wn.txt") (test-failure-log . "server/built/test-fail/wn.txt") (test-success-log . #f))) ("bencode" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "bencode" "doc/bencode@bencode/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bencode.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bencode.txt"))) ("ruckus" . #hash((author . "code@cliffle.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "ruckus" "doc/ruckus@ruckus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ruckus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ruckus.txt"))) ("postnet" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "postnet" "doc/postnet@postnet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/postnet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/postnet.txt"))) ("libscrypt" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "libscrypt" "doc/libscrypt@libscrypt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libscrypt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libscrypt.txt"))) ("echonest" . #hash((author . "greghendershott@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/echonest.txt") (test-failure-log . "server/built/test-fail/echonest.txt") (test-success-log . #f))) ("pvector" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "pvector" "doc/pvector@pvector/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pvector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pvector.txt"))) ("python-tokenizer" . #hash((author . "clements@racket-lang.org dyoo@hashcollision.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "python-tokenizer" "doc/python-tokenizer@python-tokenizer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/python-tokenizer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/python-tokenizer.txt"))) ("scriblogify" . #hash((author . "ryanc@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "scriblogify" "doc/scriblogify@scriblogify/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scriblogify.txt") (test-failure-log . "server/built/test-fail/scriblogify.txt") (test-success-log . #f))) ("http" . #hash((author . "greghendershott@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "http" "doc/http@http/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http.txt") (test-failure-log . "server/built/test-fail/http.txt") (test-success-log . #f))) ("deferred" . #hash((author . "cjfuller@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "deferred" "doc/deferred@deferred/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/deferred.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/deferred.txt"))) ("avl" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "avl" "doc/avl@avl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/avl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/avl.txt"))) ("envy" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "envy" "doc/envy@envy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/envy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/envy.txt"))) ("json-socket" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-socket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-socket.txt"))) ("c-utils" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "c-utils" "doc/c-utils@c-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/c-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/c-utils.txt"))) ("tasks" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "tasks" "doc/tasks@tasks/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tasks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tasks.txt"))) ("match-count" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/match-count.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/match-count.txt"))) ("rackunit-spec" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "rackunit-spec" "doc/rackunit-spec@rackunit-spec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-spec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-spec.txt"))) ("rsound" . #hash((author . "clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "rsound" "doc/rsound@rsound/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsound.txt") (test-failure-log . "server/built/test-fail/rsound.txt") (test-success-log . #f))) ("raco-macro-step" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-macro-step.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-macro-step.txt"))) ("3d-model" . #hash((author . "code_man@cybnet.ch") (conflicts-log . #f) (dep-failure-log . "server/built/deps/3d-model.txt") (docs . (#s(doc/main "3d-model" "doc/3d-model@3d-model/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/3d-model.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/3d-model.txt"))) ("typed-racket-doc" . #hash((docs . (#s(doc/main "ts-reference" "doc/ts-reference@typed-racket-doc/index.html") #s(doc/main "ts-guide" "doc/ts-guide@typed-racket-doc/index.html"))))) ("irc-client" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "irc-client" "doc/irc-client@irc-client/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/irc-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/irc-client.txt"))) ("unstable-parameter-group-lib" . #hash((author . "mflatt@racket-lang.org ntoronto@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-parameter-group-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-parameter-group-lib.txt"))) ("grommet" . #hash((author . "ray.racine@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "grommet" "doc/grommet@grommet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/grommet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/grommet.txt"))) ("javascript" . #hash((author . "samth@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "javascript" "doc/javascript@javascript/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/javascript.txt") (test-failure-log . "server/built/test-fail/javascript.txt") (test-success-log . #f))) ("TalkTyper" . #hash((author . "spencer@florence.io") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/TalkTyper.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/TalkTyper.txt"))) ("feature-profile" . #hash((author . "stamourv@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "feature-profile" "doc/feature-profile@feature-profile/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/feature-profile.txt") (test-failure-log . "server/built/test-fail/feature-profile.txt") (test-success-log . #f))) ("whalesong" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/none "manual"))) (failure-log . "server/built/fail/whalesong.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("RacketUI" . #hash((author . "nadeem@acm.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "racketui" "doc/racketui@RacketUI/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/RacketUI.txt") (test-failure-log . "server/built/test-fail/RacketUI.txt") (test-success-log . #f))) ("errortrace-doc" . #hash((docs . (#s(doc/main "errortrace" "doc/errortrace@errortrace-doc/index.html"))))) ("measures-with-dimensions" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "measures-with-dimensions" "doc/measures-with-dimensions@measures-with-dimensions/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/measures-with-dimensions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/measures-with-dimensions.txt"))) ("bystroTeX" . #hash((author . "amkhlv@gmail.com") (conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (#s(doc/extract "manual" "doc/manual@bystroTeX/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bystroTeX.txt") (test-failure-log . "server/built/test-fail/bystroTeX.txt") (test-success-log . #f))) ("x11" . #hash((author . "laurent.orseau@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/x11.txt") (test-failure-log . "server/built/test-fail/x11.txt") (test-success-log . #f))) ("webscraperhelper" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "webscraperhelper" "doc/webscraperhelper@webscraperhelper/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/webscraperhelper.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/webscraperhelper.txt"))) ("gdbdump" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "gdbdump" "doc/gdbdump@gdbdump/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gdbdump.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gdbdump.txt"))) ("uu-cs5510" . #hash((author . "mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uu-cs5510.txt") (test-failure-log . "server/built/test-fail/uu-cs5510.txt") (test-success-log . #f))) ("ccnum" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "ccnum" "doc/ccnum@ccnum/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ccnum.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ccnum.txt"))) ("popl-2012-ryr-talk" . #hash((author . "robby@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/popl-2012-ryr-talk.txt") (test-failure-log . "server/built/test-fail/popl-2012-ryr-talk.txt") (test-success-log . #f))) ("dherman-struct" . #hash((author . "clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dherman-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dherman-struct.txt"))) ("plot-doc" . #hash((docs . (#s(doc/main "plot" "doc/plot@plot-doc/index.html"))))) ("libserialport" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "libserialport" "doc/libserialport@libserialport/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libserialport.txt") (test-failure-log . "server/built/test-fail/libserialport.txt") (test-success-log . #f))) ("plai-lazy" . #hash((author . "mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "plai-lazy" "doc/plai-lazy@plai-lazy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-lazy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-lazy.txt"))) ("grip" . #hash((author . "ray.racine@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "grip" "doc/grip@grip/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/grip.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/grip.txt"))) ("gcstats" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gcstats.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gcstats.txt"))) ("sweet-exp" . #hash((author . "asumu@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "sweet" "doc/sweet@sweet-exp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sweet-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sweet-exp.txt"))) ("profile-doc" . #hash((docs . (#s(doc/main "profile" "doc/profile@profile-doc/index.html"))))) ("draw-doc" . #hash((docs . (#s(doc/main "draw" "doc/draw@draw-doc/index.html"))))) ("java" . #hash((author . "clements@racket-lang.org dherman@mozilla.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "java" "doc/java@java/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/java.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/java.txt"))) ("automata-lib" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata-lib.txt"))) ("unstable-test" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org robby@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-test.txt") (test-failure-log . "server/built/test-fail/unstable-test.txt") (test-success-log . #f))) ("gregor" . #hash((author . "zeppieri@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor.txt"))) ("staged-slide" . #hash((author . "stamourv@racket-lang.org cce@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "staged-slide" "doc/staged-slide@staged-slide/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/staged-slide.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/staged-slide.txt"))) ("exact-decimal-lang" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "exact-decimal-lang" "doc/exact-decimal-lang@exact-decimal-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/exact-decimal-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/exact-decimal-lang.txt"))) ("numformat-old" . #hash((author . "neil@neilvandyke.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "numformat-old" "doc/numformat-old@numformat-old/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/numformat-old.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/numformat-old.txt"))) ("ppict" . #hash((author . "ryanc@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "ppict" "doc/ppict@ppict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ppict.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ppict.txt"))) ("unstable-debug-lib" . #hash((author . "samth@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-debug-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-debug-lib.txt"))) ("wavelet-transform-haar-1d" . #hash((author . "clements@racket-lang.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "wavelet" "doc/wavelet@wavelet-transform-haar-1d/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wavelet-transform-haar-1d.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wavelet-transform-haar-1d.txt"))) ("game" . #hash((author . "uberbacher1618@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/game.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("nanopass" . #hash((author . "leif@leifandersen.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "nanopass" "doc/nanopass@nanopass/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nanopass.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/nanopass.txt"))) ("whalesong-tools" . #hash((author . "stchang@racket-lang.org vyadav@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/whalesong-tools.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("rackunit-doc" . #hash((docs . (#s(doc/main "rackunit" "doc/rackunit@rackunit-doc/index.html"))))) ("drbayes" . #hash((author . "neil.toronto@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/drbayes.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("fra" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "fra" "doc/fra@fra/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fra.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fra.txt"))) ("io" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/io.txt") (test-failure-log . "server/built/test-fail/io.txt") (test-success-log . #f))) ("doodle" . #hash((author . "leif@leifandersen.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "doodle" "doc/doodle@doodle/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/doodle.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/doodle.txt"))) ("this-and-that" . #hash((author . "jensaxel@soegaard.net") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/none "chipmunk"))) (failure-log . "server/built/fail/this-and-that.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) ("scratchy" . #hash((author . "mflatt@cs.utah.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "scratchy" "doc/scratchy@scratchy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scratchy.txt") (test-failure-log . "server/built/test-fail/scratchy.txt") (test-success-log . #f))) ("slack-api" . #hash((author . "octotep@sdf.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slack-api.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slack-api.txt"))) ("explorer" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/explorer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/explorer.txt"))) ("rackjure" . #hash((author . "greghendershott@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "rackjure" "doc/rackjure@rackjure/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackjure.txt") (test-failure-log . "server/built/test-fail/rackjure.txt") (test-success-log . #f))) ("temp-c-doc" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "temp-c" "doc/temp-c@temp-c-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/temp-c-doc.txt"))) ("monad" . #hash((author . "tonygarnockjones@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/monad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/monad.txt"))) ("css-tools" . #hash((author . "mb@mbtype.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "css-tools" "doc/css-tools@css-tools/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/css-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/css-tools.txt"))) ("preprocessor" . #hash((docs . (#s(doc/main "preprocessor" "doc/preprocessor@preprocessor/index.html"))))) ("irc" . #hash((author . "schuster@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "irc" "doc/irc@irc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/irc.txt") (test-failure-log . "server/built/test-fail/irc.txt") (test-success-log . #f))) ("egal" . #hash((author . "samth@ccs.neu.edu") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/egal.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/egal.txt"))) ("r7rs" . #hash((author . "lexi.lambda@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r7rs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r7rs.txt"))) ("parameter" . #hash((author . "samth@racket-lang.org") (conflicts-log . #f) (dep-failure-log . "server/built/deps/parameter.txt") (docs . (#s(doc/main "parameter" "doc/parameter@parameter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parameter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parameter.txt"))) ("mm" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mm.txt"))) ("opencl" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "opencl" "doc/opencl@opencl/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/opencl.txt") (success-log . "server/built/install/opencl.txt") (test-failure-log . "server/built/test-fail/opencl.txt") (test-success-log . #f))) ("simple-qr" . #hash((author . "chenxiao770117@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "simple-qr" "doc/simple-qr@simple-qr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-qr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-qr.txt"))) ("cover-codecov" . #hash((author . "spencer@florence.io plessner.ryan@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-codecov.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover-codecov.txt"))) ("beautiful-racket" . #hash((author . "mb@mbtype.com") (conflicts-log . #f) (dep-failure-log . "server/built/deps/beautiful-racket.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beautiful-racket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beautiful-racket.txt"))) ("esc-vp21" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "esc-vp21" "doc/esc-vp21@esc-vp21/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/esc-vp21.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/esc-vp21.txt"))) ("binary-class-mp3" . #hash((author . "kalimehtar@mail.ru") (conflicts-log . #f) (dep-failure-log . #f) (docs . (#s(doc/main "binary-class-mp3" "doc/binary-class-mp3@binary-class-mp3/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-mp3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-mp3.txt"))) ("cuecore" . #hash((author . "mordae@anilinux.org") (conflicts-log . #f) (dep-failure-log . "server/built/deps/cuecore.txt") (docs . (#s(doc/main "cuecore" "doc/cuecore@cuecore/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cuecore.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cuecore.txt"))) ("lazy" . #hash((docs . (#s(doc/main "lazy" "doc/lazy@lazy/index.html"))))) ("syntax-macro-lang" . #hash((author . "alexander@knauth.org") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-macro-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-macro-lang.txt"))) ("markparam-lib" . #hash((author . "jay.mccarthy@gmail.com") (conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam-lib.txt"))))
